from ctypes import *
from my_debugger_defines import *

kernel32 = windll.kernel32

class debugger():
    def __init__(self):
        self.h_process            = None
        self.pid                  = None
        self.debugger_active      = False
        self.h_thread			  = None
        self.context 			  = None
        self.exception			  = None
        self.exception_address    = None
        self.breakpoints 		  = {}
        self.first_breakpoint	  = True
        self.hardware_breakpoints = {}
        self.guarded_pages		  = {}
        self.memory_breakpoints   = {}
        #Determine and store page size of system
        system_info = SYSTEM_INFO()
        kernel32.GetSystemInfo(byref(system_info))
        self.page_size = system.info.dwPageSize
        

	def bp_set_mem(self, address, size):
		mbi = MEMORY_BASIC_INFORMATION()
		#VirtualQueryEx() must return full sized MEMORY_BASIC_INFORMATION
		if kernel32.VirtualQueryEx(self.h_process, address, byref(mbi), sizeof(mbi)) < sizeof(mbi):
			return False
		current_page = mpi.BaseAddress
		#Set permissions on all pages affected by memory breakpoint
		while current_page <= address + size:
			#Add page to list
			self.guarded_pages.append(current_page)
			old_protection = c_ulong(0)
			if not kernel32.VirtualProtectEx(self.h_process, current_page, size, mbi.Protect | PAGE_GUARD, byref(old_protection)):
				return False
			#Increase our range by the size of default memory page size
			current_page += self.page_size
		#Add memory breakpoint to global list
		self.memory_breakpoints[address] = (address, size, mbi)
		return True
	
	def exception_handler_single_step(self):
		if self.context.Dr6 & 0x1 and self.hardware_breakpoints.has_key(0):
			slot = 0
		elif self.context.Dr6 & 0x2 and self.hardware_breakpoints.has_key(1):
			slot = 1
		elif self.context.Dr6 & 0x4 and self.hardware_breakpoints.has_key(2):
			slot = 2
		elif self.context.Dr7 & 0x8 and self.hardware_breakpoints.has_key(3):
			slot = 3
		else:
			#This wasn't an INT1 generated by ta hw breakpoint
			contnue_status = DBG_EXCEPTION_NOT_HANDLED
		
		#Remove breakpoint from the list
		if self.bp_del_hw(slot):
			continue_status = DBG_CONTINUE
		print("[*] Hardware breakpoint removed.")
		return continue_status
	
	def bp_del_hw(self, slot):
		#Disable breakpoint for all active threads
		for thread_id in self.enumerate_threads():
			context = self.get_thread_context
			
			#Reset the flags to remove the breakpoints
			context.Dr7 &= ~(1 << (slot * 2))
			
			#Zero out the address
			if slot == 0:
				context.Dr0 = 0x00000000
			elif slot == 1:
				context.Dr1 = 0x00000000
			elif slot == 2:
				context.Dr2 = 0x00000000
			elif slot == 3:
				context.Dr3 = 0x00000000
			
			#Remove the condition flag
			context.Dr7 &= ~(3 << ((slot * 4) + 16))
			
			#Remove the length flag
			context.Dr7 &= ~(3 << ((slot * 4) + 18))
			
			#Reset the thread context with breakpoint removed
			h_thread = self.open_thread(thread_id)
			kernel32.SetThreadContext(h_thread, byref(context))
		
		#Remove thre breakpoint from the internal list
		del self.hardware_breakpoints[slot]
		
		return True
	
	def bp_set_hw(self, address, length, condition):
		#Check for a valid length value
		if length not in (1, 2 ,4):
			return False
		else:
			length -= 1
		
		#Check for a valid condition
		if condition not in (HW_ACCESS, HW_EXECUTE, HW_WRITE):
			return False
		
		#Check for available slots
		if not self.hardware_breakpoints.has_key(0):
			available = 0
		elif not self.hardware_breakpoints.has_key(1):
			available = 1
		elif not self.hardware_breakpoints.has_key(2):
			available = 2
		elif not self.hardware_breakpoints.has_key(3):
			available = 3
		else:
			return False
		#Set debug register in every thread
		for thread_id in self.enumerate_threads():
			context = self.get_thread_context(thread_id=thread_id)
			
			#Enable the appropriate flag in the DR7 register to set break
			context.Dr7 |=1 << (available * 2)
		#Save address of breakpoint in free register found
		if available == 0:
			context.Dr0 = address
		elif available == 1:
			context.Dr1 = address
		elif available == 2:
			context.Dr2 = address
		elif available == 3:
			context.Dr3 = address
		#Set breakpoint condition
		context.Dr7 |= condition << ((available * 4) + 16)
		#Set the length
		context.Dr7 |= length << ((available * 4) + 18)
		#Set thread context with the break set
		h_thread = self.open_thread(thread_id)
		kernel32.SetThreadContext(h_thread, byref(context))
		
		#Update the internal hardware breakpoint array at used slot index
		self.hardware_breakpoints[available] = (address, length, condition)
		
		return True

    def bp_set(self, address):
		if not self.breakpoints.has_key(address):
			
			try:
				#Store the original byte
				original_byte = self.read_process_memory(address, 1)
				
				#Write the INT3 opcode
				self.write_process_memory(address, "\xCC")
				
				#Register the breakpoint in internal list
				self.breakpoints[address] = (address, original_byte)
			
			except:
				return False
			
			return True
    
    def func_resolve(self, dll, function):
		handle = kernel32.GetModuleHandleA(dll)
		address = kernel32.GetProcAddress(handle, function)
		
		kernel32.CloseHandle(handle)
		
		return address

    
    def load(self, path_to_exe):

        #dwCreation flag determines how to create the process
        #set creation flags = CREATE_NEW_CONSOLE if you want
        #to see Calculator GUI
        creation_flags = DEBUG_PROCESS

        #instantiate structs
        startupinfo = STARTUPINFO()
        process_information = PROCESS_INFORMATION()

        #The following 2 options allow the started process
        #to be shown as a separate window. This also illustrates
        #how different settings in the STARTUPINFO struct can affect
        #the debuggee
        startupinfo.dwFlags = 0x1
        startupinfo.wShowWindow = 0x0

        #We then initializa the cb variable in the STARTUPINFO struct
        #which is just the size of the struct itself
        startupinfo.cb = sizeof(startupinfo)

        if kernel32.CreateProcessA(path_to_exe,
                                   None,
                                   None,
                                   None,
                                   False,
                                   creation_flags,
                                   None,
                                   None,
                                   byref(startupinfo),
                                   byref(process_information)):
            print("[*] We have succesfully launched the process!")
            print("[*] PID: ", process_information.dwProcessId)

            # attach the process ID to debug it
            self.attach(process_information.dwProcessId)
        else:
            print("[!] Error: ", kernel32.GetLastError())

    def open_process(self, pid):
        return kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, pid)

    def open_thread(self, thread_id):
        h_thread = kernel32.OpenThread(THREAD_ALL_ACCESS, False, thread_id)

        if h_thread is not None:
            return h_thread
        else:
            print("[!] Could not obtain a valid thread handle")
            return False

    def enumerate_threads(self):

        thread_entry = THREADENTRY32()
        thread_list = []
        snapshot = kernel32.CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, self.pid)

        if snapshot is not None:
            # You have to set the size of the struct or the call will fail
            thread_entry.dwSize = sizeof(thread_entry)
            success = kernel32.Thread32First(snapshot, byref(thread_entry))
            while success:
                if thread_entry.th32OwnerProcessID == self.pid:
                    thread_list.append(thread_entry.th32ThreadID)
                success = kernel32.Thread32Next(snapshot, byref(thread_entry))

            kernel32.CloseHandle(snapshot)
            return thread_list
        else:
            return False

    def get_thread_context(self, thread_id=None, h_thread=None):
        context = CONTEXT()
        context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS

        if not h_thread:
            h_thread = self.open_thread(thread_id)
        # Obtain a handle to the thread
        h_thread = self.open_thread(thread_id)
        if kernel32.GetThreadContext(h_thread, byref(context)):
            kernel32.CloseHandle(h_thread)
            return context
        else:
            return False

    def attach(self, pid):
        self.h_process = self.open_process(pid)

        #We attempt to attach to the process
        #If this fails we exit the call

        if kernel32.DebugActiveProcess(pid):
            self.debugger_active = True
            self.pid = int(pid)
        else:
            print("[!] Unable to attach to the process.")
            print("[!] Error: ", kernel32.GetLastError())

    def run(self):
        #Now we poll the debuggee for debug events
        while self.debugger_active:
            self.get_debug_event()

    def get_debug_event(self):
        debug_event = DEBUG_EVENT()
        continue_status = DBG_CONTINUE

        if kernel32.WaitForDebugEvent(byref(debug_event), INFINITE):
            #Obtain the thread and context information
            self.h_thread = self.open_thread(debug_event.dwThreadId)
            self.context = self.get_thread_context(self.h_thread)

            print("Event Code: %d Thread ID: %d" % (debug_event.dwDebugEventCode, debug_event.dwThreadId))
            #If event code is exception, examine further
            if debug_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT:
            #Obtain the exception code
                exception = debug_event.u.Exception.ExceptionRecord.ExceptionCode
                self.exception_address = debug_event.u.Exception.ExceptionRecord.ExceptionAddress

                if self.exception == EXCEPTION_ACCESS_VIOLATION:
                   print("[!] Access Violation Detected")
                   #Breakpoint detected call handler
                elif self.exception == EXCEPTION_BREAKPOINT:
                   continue_status = self.exception_handler_breakpoint()
                elif self.exception == EXCEPTION_GUARD_PAGE:
                   print("[!] Guard Page Access Detected")
                elif self.exception == EXCEPTION_SINGLE_STEP:
                   self.exception_handler_single_step()

            kernel32.ContinueDebugEvent(
                debug_event.dwProcessId,
                debug_event.dwThreadId,
                continue_status)

    def detach(self):
        if self.pid is None:
            print("[!] There's no process to detach from")
            return False
        elif kernel32.DebugActiveProcessStop(self.pid):
            print("[*] Finished debugging. Exiting ...")
            return True
        else:
            print("[!] There was an error.")
            return False

    def exception_handler_breakpoint(self):
        print("[*] Inside the breakpoint handler")
        print("[*] Exception address: 0x%08x" % self.exception_address)
        return DBG_CONTINUE

	def read_process_memory(self, address, length):
		data		= ""
		read_buf	= create_string_buffer(length)
		count		= c_ulong(0)
		
		if not kernel32.ReadProcessMemory(self.h_process, address, read_buf, length, byref(count)):
			return False
		else:
			data += read_buff.raw
			return data
		
	def write_process_memory(self, address, data):
		count  = c_ulong(0)
		length = len(data)
		
		c_data = c_char_p(data[count.value:])
		
		if not kernel32.WriteProcessMemory(self.h_process, address, c_data, length, byref(count)):
			return False
		else:
			return True
			
	
